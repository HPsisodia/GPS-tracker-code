//O(n2) Check How much value intersect with eac timing

//O(nlogn)
Maintain two pointers in sorted Array and see at what time max platforms are required
import java.util.*; 
  
class GFG { 
  
    // Returns minimum number of platforms reqquired 
    static int findPlatform(int arr[], int dep[], int n) 
    { 
        // Sort arrival and departure arrays 
        Arrays.sort(arr); 
        Arrays.sort(dep); 
  
        // plat_needed indicates number of platforms 
        // needed at a time 
        int plat_needed = 1, result = 1; 
        int i = 1, j = 0; 
  
        // Similar to merge in merge sort to process 
        // all events in sorted order 
        while (i < n && j < n) { 
  
            // If next event in sorted order is arrival, 
            // increment count of platforms needed 
            if (arr[i] <= dep[j]) { 
                plat_needed++; 
                i++; 
            } 
  
            // Else decrement count of platforms needed 
            else if (arr[i] > dep[j]) { 
                plat_needed--; 
                j++; 
            } 
  
            // Update result if needed 
            if (plat_needed > result) 
                result = plat_needed; 
        } 
  
        return result; 
    } 
  
    // Driver program to test methods of graph class 
    public static void main(String[] args) 
    { 
        int arr[] = { 900, 940, 950, 1100, 1500, 1800 }; 
        int dep[] = { 910, 1200, 1120, 1130, 1900, 2000 }; 
        int n = arr.length; 
        System.out.println("Minimum Number of Platforms Required = "
                           + findPlatform(arr, dep, n)); 
    } 
} 






//Auxilliary Array Approach
include <bits/stdc++.h> 
using namespace std; 
  
int minPlatform(int arrival[], int departure[], int n) 
{ 
  
    // as time range from 0 to 2359 in 24 hour clock, 
    // we declare an array for values from 0 to 2360 
    int platform[2361] = {}; 
    int requiredPlatform = 1; 
    for (int i = 0; i < n; i++) { 
  
        // increment the platforms for arrival 
        ++platform[arrival[i]];  
  
         // once train departs we decrease the platform count 
        --platform[departure[i] + 1]; 
    } 
  
    // We are running loop till 2361 because maximum time value 
    // in a day can be 23:60 
    for (int i = 1; i < 2361; i++) { 
  
        // taking cumulative sum of platform give us required 
        // number of platform fro every minute 
        platform[i] = platform[i] + platform[i - 1];  
        requiredPlatform = max(requiredPlatform, platform[i]); 
    } 
    return requiredPlatform; 
} 
  
// Driver code 
int main() 
{ 
    int arr[] = { 900, 940, 950, 1100, 1500, 1800 }; 
    int dep[] = { 910, 1200, 1120, 1130, 1900, 2000 }; 
    int n = sizeof(arr) / sizeof(arr[0]); 
    cout << "Minimum Number of Platforms Required = "
         << minPlatform(arr, dep, n); 
    return 0; 
} 